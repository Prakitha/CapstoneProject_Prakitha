{"ast":null,"code":"import { put, takeLatest, all } from \"redux-saga/effects\"; // we need to code generator function for saga like this\n// my node app saga\n\nfunction* searchDoctor(action) {\n  const json = yield fetch(\"http://localhost:8000/doctors/search/speciality/\" + action.speciality).then(response => response.json()).catch(err => console.log(err));\n  yield put({\n    type: \"DOCTOR_DATA_RECEIVED\",\n    json: json\n  });\n}\n\nfunction* actionWatcher() {\n  yield takeLatest(\"SEARCH_BY_SPECIALITY\", searchDoctor);\n} // my new player app\n\n\nfunction* addNewDoctor(action) {\n  var bodyContent = {\n    doctorNumber: action.doctor.doctorNumber,\n    name: action.doctor.name,\n    qualification: action.doctor.qualification,\n    speciality: action.doctor.speciality\n  };\n  var stringifiedBody = JSON.stringify(bodyContent);\n  const serverResponse = yield fetch(\"http://localhost:8000/doctors/add\", {\n    method: \"POST\",\n    body: stringifiedBody,\n    headers: {\n      \"Content-type\": \"application/json;chartset=UTF-8\"\n    }\n  }).then(res => res.json()).catch(err => console.log(err));\n  yield put({\n    type: \"ADD_DOCTOR_SERVER_RESPONSE\",\n    serverMsg: serverResponse.msg\n  });\n  console.log(\"added doctor sucessfully\");\n}\n\nfunction* actionWatcher1() {\n  yield takeLatest(\"ADDED_A_DOCTOR_TO_BACKEND\", addNewDoctor);\n}\n\nfunction* deleteDoctor(action) {\n  var bodyContent = {\n    // _id:action.doctor._id,\n    doctorNumber: action.doctorNumber // name: action.doctor.name,\n    //qualification: action.doctor.qualification,\n    // speciality: action.doctor.speciality,\n\n  }; //   console.log(\"inside delete saga\")\n  // console.log(action)\n\n  var stringifiedBody = JSON.stringify(bodyContent);\n  const serverResponse = yield fetch(\"http://localhost:8000/doctors/delete/\" + action.doctorNumber, {\n    method: \"POST\",\n    body: stringifiedBody,\n    headers: {\n      \"Content-type\": \"application/json;chartset=UTF-8\"\n    }\n  }).then(response => response.json()).catch(err => console.log(err)); // console.log(\"inside delete saga\")\n\n  yield put({\n    type: \"DOCTOR_DATA_DELETED\",\n    serverMsg: serverResponse.msg\n  });\n}\n\nfunction* actionWatcher2() {\n  yield takeLatest(\"DELETED_A_DOCTOR_IN_BACKEND\", deleteDoctor);\n}\n\nfunction* editNewDoctor(action) {\n  var bodyContent = {\n    // _id:action.doctor._id,\n    // doctorNumber: action.doctor.doctorNumber,\n    // name: action.doctor.name,\n    qualification: action.doctor.qualification // speciality: action.doctor.speciality,\n\n  };\n  var stringifiedBody = JSON.stringify(bodyContent);\n  const serverResponse = yield fetch(\"http://localhost:8000/doctors/update/\" + action.doctor._id, {\n    method: \"POST\",\n    body: stringifiedBody,\n    headers: {\n      \"Content-type\": \"application/json;chartset=UTF-8\"\n    }\n  }).then(res => res.json()).catch(err => console.log(err));\n  yield put({\n    type: \"EDIT_DOCTOR_SERVER_RESPONSE\",\n    serverMsg: serverResponse.msg\n  }); // console.log(\"edited doctor sucessfully\")\n}\n\nfunction* actionWatcher3() {\n  yield takeLatest(\"EDITED_A_DOCTOR_TO_BACKEND\", editNewDoctor);\n} // for all the above sagas we need to create root saga\n\n\nexport default function* rootSaga() {\n  yield all([actionWatcher(), actionWatcher1(), actionWatcher2(), actionWatcher3()]);\n}","map":{"version":3,"sources":["C:/Users/Dell 7010/OneDrive/Desktop/project git/CapstoneProject_Prakitha/Clinic_Management_React_App/src/Sagas/HelloSaga.js"],"names":["put","takeLatest","all","searchDoctor","action","json","fetch","speciality","then","response","catch","err","console","log","type","actionWatcher","addNewDoctor","bodyContent","doctorNumber","doctor","name","qualification","stringifiedBody","JSON","stringify","serverResponse","method","body","headers","res","serverMsg","msg","actionWatcher1","deleteDoctor","actionWatcher2","editNewDoctor","_id","actionWatcher3","rootSaga"],"mappings":"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","sourcesContent":["\r\n\r\nimport { put, takeLatest, all } from \"redux-saga/effects\";\r\n// we need to code generator function for saga like this\r\n// my node app saga\r\n\r\nfunction* searchDoctor(action) {\r\n  const json = yield fetch(\"http://localhost:8000/doctors/search/speciality/\" + action.speciality).\r\n    then((response) =>\r\n      response.json()\r\n    )\r\n    .catch((err) => console.log(err));\r\n  yield put({ type: \"DOCTOR_DATA_RECEIVED\", json: json });\r\n}\r\nfunction* actionWatcher() {\r\n  yield takeLatest(\"SEARCH_BY_SPECIALITY\", searchDoctor);\r\n}\r\n\r\n// my new player app\r\n\r\nfunction* addNewDoctor(action) {\r\n  var bodyContent = {\r\n    doctorNumber: action.doctor.doctorNumber,\r\n    name: action.doctor.name,\r\n    qualification: action.doctor.qualification,\r\n    speciality: action.doctor.speciality,\r\n  };\r\n\r\n  var stringifiedBody = JSON.stringify(bodyContent);\r\n\r\n  const serverResponse = yield fetch(\"http://localhost:8000/doctors/add\", {\r\n    method: \"POST\",\r\n    body: stringifiedBody,\r\n    headers: {\r\n      \"Content-type\": \"application/json;chartset=UTF-8\",\r\n    },\r\n  }).then((res) => res.json())\r\n    .catch((err) => console.log(err))\r\n  yield put({ type: \"ADD_DOCTOR_SERVER_RESPONSE\", serverMsg: serverResponse.msg });\r\n  console.log(\"added doctor sucessfully\")\r\n}\r\nfunction* actionWatcher1() {\r\n  yield takeLatest(\"ADDED_A_DOCTOR_TO_BACKEND\", addNewDoctor);\r\n}\r\n\r\nfunction* deleteDoctor(action) {\r\n  var bodyContent = {\r\n    // _id:action.doctor._id,\r\n    doctorNumber: action.doctorNumber,\r\n    // name: action.doctor.name,\r\n    //qualification: action.doctor.qualification,\r\n    // speciality: action.doctor.speciality,\r\n  };\r\n  //   console.log(\"inside delete saga\")\r\n  // console.log(action)\r\n  var stringifiedBody = JSON.stringify(bodyContent);\r\n  const serverResponse = yield fetch(\"http://localhost:8000/doctors/delete/\" + action.doctorNumber, {\r\n    method: \"POST\",\r\n    body: stringifiedBody,\r\n    headers: {\r\n      \"Content-type\": \"application/json;chartset=UTF-8\",\r\n    },\r\n  }).then((response) =>\r\n    response.json()\r\n\r\n  ).catch((err) => console.log(err))\r\n  // console.log(\"inside delete saga\")\r\n  yield put({ type: \"DOCTOR_DATA_DELETED\", serverMsg: serverResponse.msg });\r\n}\r\nfunction* actionWatcher2() {\r\n  yield takeLatest(\"DELETED_A_DOCTOR_IN_BACKEND\", deleteDoctor);\r\n}\r\n\r\n\r\n\r\n\r\nfunction* editNewDoctor(action) {\r\n\r\n  var bodyContent = {\r\n    // _id:action.doctor._id,\r\n    // doctorNumber: action.doctor.doctorNumber,\r\n    // name: action.doctor.name,\r\n    qualification: action.doctor.qualification,\r\n    // speciality: action.doctor.speciality,\r\n  };\r\n\r\n  var stringifiedBody = JSON.stringify(bodyContent);\r\n\r\n  const serverResponse = yield fetch(\"http://localhost:8000/doctors/update/\" + action.doctor._id, {\r\n    method: \"POST\",\r\n    body: stringifiedBody,\r\n    headers: {\r\n      \"Content-type\": \"application/json;chartset=UTF-8\",\r\n    },\r\n  }).then((res) => res.json())\r\n    .catch((err) => console.log(err))\r\n  yield put({ type: \"EDIT_DOCTOR_SERVER_RESPONSE\", serverMsg: serverResponse.msg });\r\n  // console.log(\"edited doctor sucessfully\")\r\n}\r\nfunction* actionWatcher3() {\r\n  yield takeLatest(\"EDITED_A_DOCTOR_TO_BACKEND\", editNewDoctor);\r\n}\r\n\r\n// for all the above sagas we need to create root saga\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    actionWatcher(),\r\n    actionWatcher1(),\r\n    actionWatcher2(),\r\n    actionWatcher3()\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}