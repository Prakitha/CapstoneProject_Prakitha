{"ast":null,"code":"import { put, takeLatest, all } from \"redux-saga/effects\"; // we need to code generator function for saga like this\n// my node app saga\n\nfunction* searchDoctor(action) {\n  const json = yield fetch(\"http://localhost:8000/doctors/search/speciality/\" + action.speciality).then(response => response.json());\n  yield put({\n    type: \"DOCTOR_DATA_RECEIVED\",\n    json: json\n  });\n}\n\nfunction* actionWatcher() {\n  yield takeLatest(\"SEARCH_BY_SPECIALITY\", searchDoctor);\n} // my new player app\n\n\nfunction* addNewDoctor(action) {\n  var bodyContent = {\n    doctorNumber: action.doctor.doctorNumber,\n    name: action.doctor.name,\n    qualification: action.doctor.qualification,\n    speciality: action.doctor.speciality\n  };\n  var stringifiedBody = JSON.stringify(bodyContent);\n  const serverResponse = yield fetch(\"http://localhost:8000/doctors/add\", {\n    method: \"POST\",\n    body: stringifiedBody,\n    headers: {\n      \"Content-type\": \"application/json;chartset=UTF-8\"\n    }\n  }).then(res => res.json()); //   .then((res) => console.log(`data sent successfully to the backed and  ${res.msg}`));\n\n  yield put({\n    type: \"ADD_DOCTOR_SERVER_RESPONSE\",\n    serverMsg: serverResponse.msg\n  });\n  console.log(\"added doctor sucessfully\");\n}\n\nfunction* actionWatcher1() {\n  yield takeLatest(\"ADDED_A_DOCTOR_TO_BACKEND\", addNewDoctor);\n}\n\nfunction* deleteADoctor(action) {\n  var bodyContent = {\n    doctorNumber: action.doctor.doctorNumber,\n    name: action.doctor.name,\n    qualification: action.doctor.qualification,\n    speciality: action.doctor.speciality\n  };\n  var stringifiedBody = JSON.stringify(bodyContent);\n  const serverResponse = yield fetch(\"http://localhost:8000/doctors/delete/name\", {\n    method: \"POST\",\n    body: stringifiedBody,\n    headers: {\n      \"Content-type\": \"application/json;chartset=UTF-8\"\n    }\n  }).then(res => res.json());\n  yield put({\n    type: \"DELETE_DOCTOR_SERVER_RESPONSE\",\n    serverMsg: serverResponse.msg\n  });\n  console.log(\"deleted doctor sucessfully\");\n}\n\nfunction* actionWatcher2() {\n  yield takeLatest(\"DELETED_A_DOCTOR_IN_BACKEND\", deleteADoctor);\n} // for all the above sagas we need to create root saga\n\n\nexport default function* rootSaga() {\n  yield all([actionWatcher(), actionWatcher1(), actionWatcher2()]);\n}","map":{"version":3,"sources":["C:/Users/Dell 7010/OneDrive/Desktop/ProjectFinal/CapstonePrakitha/clinic/src/Sagas/HelloSaga.js"],"names":["put","takeLatest","all","searchDoctor","action","json","fetch","speciality","then","response","type","actionWatcher","addNewDoctor","bodyContent","doctorNumber","doctor","name","qualification","stringifiedBody","JSON","stringify","serverResponse","method","body","headers","res","serverMsg","msg","console","log","actionWatcher1","deleteADoctor","actionWatcher2","rootSaga"],"mappings":"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","sourcesContent":["\r\nimport { put, takeLatest, all } from \"redux-saga/effects\";\r\n// we need to code generator function for saga like this\r\n// my node app saga\r\n\r\nfunction* searchDoctor(action) {\r\n  const json = yield fetch(\"http://localhost:8000/doctors/search/speciality/\" + action.speciality).then((response) =>\r\n    response.json()\r\n\r\n  );\r\n  yield put({ type: \"DOCTOR_DATA_RECEIVED\", json: json });\r\n}\r\nfunction* actionWatcher() {\r\n  yield takeLatest(\"SEARCH_BY_SPECIALITY\", searchDoctor);\r\n}\r\n\r\n// my new player app\r\n\r\nfunction* addNewDoctor(action) {\r\n  var bodyContent = {\r\n    doctorNumber: action.doctor.doctorNumber,\r\n    name: action.doctor.name,\r\n    qualification: action.doctor.qualification,\r\n    speciality: action.doctor.speciality,\r\n  };\r\n\r\n  var stringifiedBody = JSON.stringify(bodyContent);\r\n\r\n  const serverResponse = yield fetch(\"http://localhost:8000/doctors/add\", {\r\n    method: \"POST\",\r\n    body: stringifiedBody,\r\n    headers: {\r\n      \"Content-type\": \"application/json;chartset=UTF-8\",\r\n    },\r\n  }).then((res) => res.json());\r\n  //   .then((res) => console.log(`data sent successfully to the backed and  ${res.msg}`));\r\n  yield put({ type: \"ADD_DOCTOR_SERVER_RESPONSE\", serverMsg: serverResponse.msg });\r\n  console.log(\"added doctor sucessfully\")\r\n}\r\nfunction* actionWatcher1() {\r\n  yield takeLatest(\"ADDED_A_DOCTOR_TO_BACKEND\", addNewDoctor);\r\n}\r\n\r\nfunction* deleteADoctor(action) {\r\n  var bodyContent = {\r\n    doctorNumber: action.doctor.doctorNumber,\r\n    name: action.doctor.name,\r\n    qualification: action.doctor.qualification,\r\n    speciality: action.doctor.speciality,\r\n  };\r\n\r\n  var stringifiedBody = JSON.stringify(bodyContent);\r\n\r\n  const serverResponse = yield fetch(\"http://localhost:8000/doctors/delete/name\", {\r\n    method: \"POST\",\r\n    body: stringifiedBody,\r\n    headers: {\r\n      \"Content-type\": \"application/json;chartset=UTF-8\",\r\n    },\r\n  }).then((res) => res.json());\r\n  yield put({ type: \"DELETE_DOCTOR_SERVER_RESPONSE\", serverMsg: serverResponse.msg });\r\n  console.log(\"deleted doctor sucessfully\")\r\n}\r\nfunction* actionWatcher2() {\r\n  yield takeLatest(\"DELETED_A_DOCTOR_IN_BACKEND\", deleteADoctor);\r\n}\r\n// for all the above sagas we need to create root saga\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    actionWatcher(),\r\n    actionWatcher1(),\r\n    actionWatcher2()\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}