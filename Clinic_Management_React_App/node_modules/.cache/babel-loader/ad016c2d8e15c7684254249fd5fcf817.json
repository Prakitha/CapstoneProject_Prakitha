{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport rootSaga from '../Sagas/HelloSaga';\nimport { composeWithDevTools } from 'redux-devtools-extension'; // import PlayerReducer from './PlayerReducerUsingImmutableJSV2';\n// lest import the required middleware library\n//first lets install npm install redux-saga\n\nimport createSagaMiddleware from 'redux-saga';\nimport doctorReducer from '../reducers/DoctorReducer';\nimport addDoctorReducer from '../reducers/AddDoctor';\nimport editDoctorReducer from '../reducers/EditDoctorReducer'; // saga is not the only middleware. there is another called Redux Thunk and a few others.\n// but saga is good for big projects coz it use promises\n// Redux Thunk has drawbacks-callback hell!\n\nconst sagaMiddleware = createSagaMiddleware();\nconst rootReducer = combineReducers({\n  reducer1: doctorReducer,\n  reducer2: addDoctorReducer,\n  reducer3: editDoctorReducer\n});\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(sagaMiddleware)) // we are introducing middleware here\n// window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\nexport default store; // middleware config is done! lets create a saga file and use it \n// run the saga middleware\n\nsagaMiddleware.run(rootSaga); //once the middleware runs, it will call our helloSaga.\n//whenever any action is dispatched to any reducer\n//lets see the action here itself\n// i am going to dispatch any action. say \"ADD_ONE\"action\n//.dispatch({type:\"DOCTOR_DATA_RECEIVED\"});","map":{"version":3,"sources":["C:/Users/Dell 7010/OneDrive/Desktop/project git/CapstoneProject_Prakitha/Clinic_Management_React_App/src/Store/MyStore.js"],"names":["createStore","combineReducers","applyMiddleware","rootSaga","composeWithDevTools","createSagaMiddleware","doctorReducer","addDoctorReducer","editDoctorReducer","sagaMiddleware","rootReducer","reducer1","reducer2","reducer3","store","run"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,eAArB,EAAsCC,eAAtC,QAA4D,OAA5D;AAEA,OAAOC,QAAP,MAAqB,oBAArB;AAEA,SAAQC,mBAAR,QAAkC,0BAAlC,C,CAEA;AAGA;AACA;;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,aAAP,MAA0B,2BAA1B;AACA,OAAOC,gBAAP,MAA6B,uBAA7B;AACA,OAAOC,iBAAP,MAA8B,+BAA9B,C,CACA;AACA;AACA;;AAEA,MAAMC,cAAc,GAAGJ,oBAAoB,EAA3C;AAGA,MAAMK,WAAW,GAAGT,eAAe,CAAC;AAChCU,EAAAA,QAAQ,EAACL,aADuB;AAEhCM,EAAAA,QAAQ,EAACL,gBAFuB;AAGhCM,EAAAA,QAAQ,EAACL;AAHuB,CAAD,CAAnC;AAKA,MAAMM,KAAK,GAAGd,WAAW,CAErBU,WAFqB,EAETN,mBAAmB,CAACF,eAAe,CAACO,cAAD,CAAhB,CAFV,CAE2C;AAChE;AAHqB,CAAzB;AAMA,eAAeK,KAAf,C,CAEA;AACA;;AACAL,cAAc,CAACM,GAAf,CAAmBZ,QAAnB,E,CACA;AACA;AAEA;AACA;AACA","sourcesContent":["import {createStore, combineReducers, applyMiddleware} from 'redux';\r\n\r\nimport rootSaga from '../Sagas/HelloSaga';\r\n\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\n\r\n// import PlayerReducer from './PlayerReducerUsingImmutableJSV2';\r\n\r\n\r\n// lest import the required middleware library\r\n//first lets install npm install redux-saga\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport doctorReducer from '../reducers/DoctorReducer';\r\nimport addDoctorReducer from '../reducers/AddDoctor';\r\nimport editDoctorReducer from '../reducers/EditDoctorReducer';\r\n// saga is not the only middleware. there is another called Redux Thunk and a few others.\r\n// but saga is good for big projects coz it use promises\r\n// Redux Thunk has drawbacks-callback hell!\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    reducer1:doctorReducer,\r\n    reducer2:addDoctorReducer,\r\n    reducer3:editDoctorReducer\r\n});\r\nconst store = createStore(\r\n    \r\n    rootReducer,composeWithDevTools(applyMiddleware(sagaMiddleware))// we are introducing middleware here\r\n    // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    );\r\n\r\nexport default store;\r\n\r\n// middleware config is done! lets create a saga file and use it \r\n// run the saga middleware\r\nsagaMiddleware.run(rootSaga);\r\n//once the middleware runs, it will call our helloSaga.\r\n//whenever any action is dispatched to any reducer\r\n\r\n//lets see the action here itself\r\n// i am going to dispatch any action. say \"ADD_ONE\"action\r\n//.dispatch({type:\"DOCTOR_DATA_RECEIVED\"});\r\n"]},"metadata":{},"sourceType":"module"}